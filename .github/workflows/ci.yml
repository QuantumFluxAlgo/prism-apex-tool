name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Enable corepack / pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm -v

      - name: Install deps
        run: pnpm install --frozen-lockfile=false

      - name: Typecheck
        run: pnpm -w run typecheck

      - name: Build
        run: pnpm -w run build

      - name: Unit tests
        run: pnpm -w run test

  compose-e2e:
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Enable corepack / pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install e2e deps & browsers
        run: |
          pnpm install --filter @prism-apex/e2e...
          pnpm --filter @prism-apex/e2e exec playwright install --with-deps

      - name: Compose up (build & start)
        run: docker compose up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for API (8000) and Dashboard (3000)..."
          for i in {1..60}; do
            API_OK=0; DASH_OK=0
            curl -fsS http://localhost:8000/ >/dev/null 2>&1 && API_OK=1 || true
            curl -fsS http://localhost:3000/ >/dev/null 2>&1 && DASH_OK=1 || true
            if [ "$API_OK" = "1" ] && [ "$DASH_OK" = "1" ]; then
              echo "Services are up"; break
            fi
            sleep 3
          done

      - name: Run Playwright smoke
        env:
          BASE_DASHBOARD_URL: http://localhost:3000
          BASE_API_URL: http://localhost:8000
        run: pnpm --filter @prism-apex/e2e test

      - name: Docker diagnostics (on failure)
        if: failure()
        run: |
          docker compose ps
          docker compose logs --no-color api || true
          docker compose logs --no-color dashboard || true

      - name: Compose down
        if: always()
        run: docker compose down -v
