name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Enable corepack / pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm -v

      - name: Install deps
        run: pnpm install --frozen-lockfile=false

      - name: Typecheck
        run: pnpm -w run typecheck

      - name: Build
        run: pnpm -w run build

      - name: Unit tests
        run: pnpm -w run test

  compose-e2e:
    # Run on pushes and same-repo PRs; skip forked PRs where docker may be unavailable
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Enable corepack / pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Ensure Docker & Compose
        id: dockercheck
        shell: bash
        run: |
          if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
            echo "has_docker=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "Installing docker & compose plugin..."
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose-plugin
          echo "has_docker=false" >> "$GITHUB_OUTPUT"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install e2e deps & browsers
        run: |
          pnpm install --filter @prism-apex/e2e
          pnpm --filter @prism-apex/e2e exec playwright install --with-deps

      - name: Compose up (build & start)
        run: |
          if [ "${{ steps.dockercheck.outputs.has_docker }}" = "true" ]; then
            docker compose up -d --build
          else
            sudo docker compose up -d --build
          fi

      - name: Wait for services to be healthy
        run: |
          for i in {1..60}; do
            API_OK=0; DASH_OK=0
            curl -fsS http://localhost:8000/health >/dev/null 2>&1 && API_OK=1 || true
            curl -fsS http://localhost:3000/ >/dev/null 2>&1 && DASH_OK=1 || true
            if [ "$API_OK" = "1" ] && [ "$DASH_OK" = "1" ]; then
              echo "Services are up"; break
            fi
            sleep 3
          done

      - name: Run Playwright smoke
        env:
          BASE_DASHBOARD_URL: http://localhost:3000
          BASE_API_URL: http://localhost:8000
        run: pnpm --filter @prism-apex/e2e test --reporter=dot

      - name: Collect docker logs (on failure)
        if: failure()
        run: |
          mkdir -p artifacts/docker
          if [ "${{ steps.dockercheck.outputs.has_docker }}" = "true" ]; then
            docker compose ps > artifacts/docker/ps.txt
            docker compose logs --no-color api > artifacts/docker/api.log || true
            docker compose logs --no-color dashboard > artifacts/docker/dashboard.log || true
          else
            sudo docker compose ps > artifacts/docker/ps.txt
            sudo docker compose logs --no-color api > artifacts/docker/api.log || true
            sudo docker compose logs --no-color dashboard > artifacts/docker/dashboard.log || true
          fi

      - name: Upload Playwright artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: apps/e2e/playwright-artifacts/**

      - name: Upload docker logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: artifacts/docker/**

      - name: Compose down
        if: always()
        run: |
          if [ "${{ steps.dockercheck.outputs.has_docker }}" = "true" ]; then
            docker compose down -v
          else
            sudo docker compose down -v
          fi

