openapi: 3.1.0
info:
  title: Prism Apex Tool API
  version: v0
  description: >
    Public API for Prism Apex Tool (MVP).
    Operators manually execute tickets in Tradovate; this API provides signals, account status, rules, alerts, reports, notifications, and health/jobs status.
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      summary: Health check
      operationId: getHealth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { type: object, properties: { ok: { type: boolean } }, required: [ok] }

  /tickets:
    get:
      summary: List current trade tickets
      operationId: listTickets
      responses:
        '200':
          description: Tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'

  /signals/preview:
    post:
      summary: Preview a candidate signal under Apex rules
      operationId: previewSignal
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SignalPreviewRequest' }
      responses:
        '200':
          description: Preview result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SignalPreviewResponse' }

  /tickets/commit:
    post:
      summary: Commit a validated ticket for operator execution
      operationId: commitTicket
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TicketCommitRequest' }
      responses:
        '200':
          description: Committed ticket
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ticket' }

  /account:
    get:
      summary: Read-only account overview (balances, drawdown headroom, open positions count)
      operationId: getAccount
      responses:
        '200':
          description: Account status
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountStatus' }

  /rules/status:
    get:
      summary: Current rules/guardrails state (EOD window, daily loss proximity, scaling)
      operationId: getRulesStatus
      responses:
        '200':
          description: Rules status
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RulesStatus' }

  /alerts:
    get:
      summary: Current alerts (WARN/CRITICAL)
      operationId: listAlerts
      responses:
        '200':
          description: Alerts
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Alert' }

  /reports:
    get:
      summary: Summary metrics (from simulator/backtests or runtime)
      operationId: getReports
      responses:
        '200':
          description: Report metrics
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReportSummary' }

  /notify/register:
    post:
      summary: Register/update recipients for notifications
      operationId: registerRecipients
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NotifyRegisterRequest' }
      responses:
        '200':
          description: Recipients updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotifyRegisterResponse' }

  /notify/test:
    post:
      summary: Send a test notification message
      operationId: sendTestNotification
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NotifyTestRequest' }
      responses:
        '200':
          description: Dispatch results
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotifyTestResponse' }

  /jobs/status:
    get:
      summary: Background jobs & flags status
      operationId: getJobsStatus
      responses:
        '200':
          description: Jobs status
          content:
            application/json:
              schema: { $ref: '#/components/schemas/JobsStatus' }

  /openapi.json:
    get:
      summary: Serve this OpenAPI document (JSON)
      operationId: getOpenApiJson
      responses:
        '200':
          description: OpenAPI JSON
          content:
            application/json: {}

components:
  schemas:
    Ticket:
      type: object
      required: [id, symbol, side, entry, stop, target, time]
      properties:
        id: { type: string }
        symbol: { type: string }
        side: { type: string, enum: [BUY, SELL] }
        entry: { type: number }
        stop: { type: number }
        target: { type: number }
        size: { type: integer, minimum: 1, default: 1 }
        time: { type: string, format: date-time }

    SignalPreviewRequest:
      type: object
      required: [symbol, side, entry, stop, target, size, mode]
      properties:
        symbol: { type: string }
        side: { type: string, enum: [BUY, SELL] }
        entry: { type: number }
        stop: { type: number }
        target: { type: number }
        size: { type: integer, minimum: 1 }
        mode: { type: string, enum: [evaluation, funded] }

    SignalPreviewResponse:
      type: object
      required: [block, reasons, normalized]
      properties:
        block: { type: boolean, description: "If true, operator must NOT place this trade" }
        reasons:
          type: array
          items: { type: string }
        normalized:
          type: object
          description: "Normalized/capped values (e.g., â‰¤5R target)"
          properties:
            entry: { type: number }
            stop: { type: number }
            target: { type: number }
            size: { type: integer, minimum: 1 }

    TicketCommitRequest:
      allOf:
        - $ref: '#/components/schemas/SignalPreviewRequest'
      description: "Commit after human review; duplicates rejected idempotently."

    AccountStatus:
      type: object
      required: [balance, drawdown, openPositions]
      properties:
        balance: { type: number }
        drawdown: { type: number }
        openPositions: { type: integer }
        netLiqHigh: { type: number, nullable: true }

    RulesStatus:
      type: object
      required: [stopRequired, rrLeq5, ddHeadroom, halfSize, consistencyPolicy, eodState]
      properties:
        stopRequired: { type: boolean }
        rrLeq5: { type: boolean }
        ddHeadroom: { type: boolean }
        halfSize: { type: string }
        consistencyPolicy:
          type: object
          properties:
            warnAt: { type: number }
            failAt: { type: number }
        eodState:
          type: string
          enum: [OK, BLOCK_NEW, EOD]

    Alert:
      type: object
      required: [level, message, ts]
      properties:
        level: { type: string, enum: [INFO, WARN, CRITICAL] }
        message: { type: string }
        ts: { type: string, format: date-time }
        tags:
          type: array
          items: { type: string }

    ReportSummary:
      type: object
      required: [win_rate, avg_r, max_dd, rule_breaches]
      properties:
        win_rate: { type: number }
        avg_r: { type: number }
        max_dd: { type: number }
        rule_breaches: { type: integer }

    NotifyRegisterRequest:
      type: object
      properties:
        email:
          type: array
          items: { type: string, format: email }
        telegramChatId: { type: string }
        slackChannelId: { type: string }
        smsNumber: { type: string }

    NotifyRegisterResponse:
      type: object
      required: [ok, recipients]
      properties:
        ok: { type: boolean }
        recipients:
          type: object
          properties:
            email: { type: array, items: { type: string, format: email } }
            telegram: { type: array, items: { type: string } }
            slack: { type: array, items: { type: string } }
            sms: { type: array, items: { type: string } }

    NotifyTestRequest:
      type: object
      required: [message]
      properties:
        message: { type: string }
        level: { type: string, enum: [INFO, WARN, CRITICAL], default: INFO }
        tags:
          type: array
          items: { type: string }
          default: []

    NotifyTestResponse:
      type: object
      required: [ok, results]
      properties:
        ok: { type: boolean }
        results:
          type: array
          items:
            type: object
            additionalProperties: true

    JobsStatus:
      type: object
      required: [jobs, flags]
      properties:
        jobs:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              everyMs: { type: integer }
              lastRun: { type: string, nullable: true }
              lastOk: { type: string, nullable: true }
              lastError: { type: string, nullable: true }
              running: { type: boolean }
        flags:
          type: object
          properties:
            ocoMissing: { type: boolean }
